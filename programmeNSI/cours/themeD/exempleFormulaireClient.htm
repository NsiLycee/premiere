<!-- Created: 10/12/2020 by Joël Dendaletche
     dans le but de montrer comment modifier dynamiquement
     le style des éléments d'une page web grâce à l'utilisation
     de javascript
-->
<!DOCTYPE html>
<html>
  <head>
    <title>Exemple de page active</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">

    <style>
    form {
    border          :       groove orange 10px      ;

    }
    table {
    border-collapse :       collapse                ; /* fusionner les bordures */
    margin-left     :       auto                    ;
    margin-right    :       auto                    ;
    }
    td, p {
    border          :       1px solid black         ; /* bordure simple */
    background      :       lightblue               ;
    color           :       darkred                 ;
    }
    td:nth-child(3n) {
    background      :       lightgreen              ; /* fond */
    padding         :       5px                     ; /* marge interne*/

    }
    th {
    border          :       2px dashed brown        ; /* bordure en tirets */
    }
    input[type=button] {
    border-radius   :       20px 10px 10px 30px     ;
    }
    input[type=button]:hover {
    padding         :       5px                     ;
    }
    div.menuTextures {

    overflow: auto;
    width           :       100px                   ;
    height          :       60px                    ;
    }
    img.menuTextures {
    width           :       100%                    ;
    }
    #choixTexture {
    width           :       5%                      ;
    }
    #H1backX {
    border-radius   :       50%                     ; /* tout rond */
    width           :       5%                      ;
    }
    p {
    }
    input, select {
    margin-left     :       auto                    ;
    margin-right    :       auto                    ;
    }
    </style>

  </head>
  <body onload="init();" id="body">

  <h1 id="h1">1. Les éléments de formulaires</h1>
  <h2 id="h2">1.1. Réglage de certaines valeurs de paramètres de style</h2>

  <form id="form">
    <table id ="table"bj><caption id="caption">Menu de réglage de quelques éléments de style</caption>
            <tr>
                <th>balise modifiée</th>
                <th colspan="2">réglage</th>
                <th>code css </th>
            </tr>
            <tr>
                <td><select id="select0"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select>
                </td>
                <td><label for="fontSize">taille de la police</label></td>
                <td><input type="range" min="25" max="400" value= "200"
                            oninput="changeStyle(document.getElementById('select0').value, this);"
                            id="fontSize" name="fontSize"/>
                </td>
                <td>    <span id="sp_select0"> h1</span> { font-size  :
                        <span id="sp_fontSize">200</span>%;}
                </td>
            </tr>
             <tr>
                <td>h2</td>
                <td><label for="H2FontSize">taille de la police</label></td>
                <td><input type="range" min="25" max="400" value= "150"
                            oninput="changeStyle('h2', this);"
                            id="H2FontSize" name="fontSize"/>
                </td>
                <td> h2 { font-size  :  <span id="sp_H2FontSize">150</span>%;}
                </td>
            </tr>
            <tr>
                <td><select id="select5"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select>
                </td>
                <td><label for="couleurFonte">couleur de la police</label></td>
                <td><input type="color" value= "black"
                            oninput="couleurTexte = this.value;
                changeCouleur(document.getElementById('select5').value, this);"
                            id="couleurFonte" name="couleur"/>
                </td>
                <td>    <span id="sp_select5"> h1</span> { color  :
                        <span id="sp_couleurFonte">200</span>;}
                </td>
            </tr>
             <tr>
                <td><select id="select1"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select></td>
                <td><label for="underline">souligner</label></td>
                <td><input type="checkbox" min="25" max="400" value= ""
onchange="changeStyle(document.getElementById('select1').value, this);"
                            id="underline" name="underline"/>
                </td>
                <td> <span id="sp_select1"> h1</span> { text-decoration  :
                     <span id="sp_underline">none</span>;}
                </td>
            </tr>
            <tr>
                <td><select id="select3"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select></td>
                <td><label for="border">bordure</label></td>
                <td>
   <input type="checkbox"
          onclick="changeStyle(document.getElementById('select3').value, this);"
          id="border" name="border" checked="false"
          value=""/>
        type : <select id="selectBordure" name="border"
                     onclick="nTypeBordure = this.selectedIndex;
             changeStyle(document.getElementById('select3').value, document.getElementById('border'));">
                </select>
        couleur : <select id="selectCouleur0" name="border"
            onclick="couleurBordure = couleurs[this.selectedIndex];
            changeStyle(document.getElementById('select3').value, document.getElementById('border'));">
                </select>
        epaisseur du trait : <input type="range" min = "0" max="25" value="1"
           onchange="epaisseur = this.value;
           changeStyle(document.getElementById('select3').value, document.getElementById('border'));"
           name="border"/>
                </td>
                <td> <span id="sp_select3"> h1</span> { border  :
                     <span id="sp_border">border 1px black</span>;}
                </td>
            </tr>
            <tr>
                <td><select id="select4"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select></td>
                <td><label for="Visible">visible</label></td>
                <td><input type="checkbox" checked
 onclick="changeStyle(document.getElementById('select4').value, this);"
                            id="Visible" name="visible"/>
                </td>
                <td> <span id="sp_select4"> h1</span> { display  :
                     <span id="sp_Visible">block</span>;}
                </td>
            </tr>
             <tr>
                <td><select id="select2"
  onchange="document.getElementById('sp_'+this.id).innerHTML = this.value;">
                    </select></td>
                <td>
                    <label for="H1backW">fond blanc</label><br/>
                    <label for="H1backO">fond orange </label><br/>
                    <label for="H1backV">fond vert</label><br/>
                    <label for="H1backB">fond bleu</label><br/>
                    <label for="H1backX">couleur sur mesure</label><br/>
                    <label for="H1backM" id="lblTexture">texture briques</label><br/>
                </td>
                <td><input type="radio" checked value="white"
                            onclick="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backW" name="background"/><br/>
                    <input type="radio"         value="orange"
                            oninput="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backO" name="background"/><br/>
                    <input type="radio"         value="lightgreen"
                            oninput="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backV" name="background"/><br/>
                    <input type="radio"         value="lightblue"
                            oninput="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backB" name="background"/><br/>
                    <input type="color" value="orange"
                            oninput="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backX" name="background"/><br/>
                    <input type="radio"         value="url(murDeBrique.jpeg)"
                            onclick="changeCouleur(document.getElementById('select2').value, this);"
                            id="H1backM" name="background"/>
                        <img id="choixTexture" src="murDeBrique.jpeg">
                        <div  class="menuTextures" id="menuTextures">
                        </div>

                   <!-- <img id="img" style="width:5%;" src="murDeBrique.jpeg"
                         alt="texture : mur de briques"> -->

                </td>
                <td> <span id="sp_select2"> h1</span>
                { background  :  <span id="sp_H1back">white</span>;}
                </td>
            </tr>
            <tr>
                <td>curseur de souris</td>
                <td colspan="2"><select id="select" name="cursor"
                                        onchange="select(this);">
                                </select></td>
                <td> body {cursor : <span id="sp_select">initial</span> }
                </td>
            </tr>
            <tr><!-- _-->
                <td>remise à zéro</td>
                <td><label for="reset">reset</label></td>
                <td colspan = "2"><input type="button" onclick="zero();"
                                         value = "reset"/>
                </td>
            </tr>
    </table>

    <p id="p"></p>
  </form>
  </body>
<!-- le script javascript est caché à la fin de ce fichier -->

<script> // début du script javascript
    // raccourci pour le paragraphe d'id="p"
    var p = document.getElementById("p");
    var descriptionCursor = ["The cursor indicates an alias of something is to be created","The cursor indicates that something can be scrolled in any direction","Default. The browser sets a cursor","The cursor indicates that a cell (or set of cells) may be selected","The cursor indicates that a context-menu is available","The cursor indicates that the column can be resized horizontally","The cursor indicates something is to be copied","The cursor render as a crosshair","The default cursor","The cursor indicates that an edge of a box is to be moved right (east)","Indicates a bidirectional resize cursor","The cursor indicates that help is available","The cursor indicates something is to be moved","The cursor indicates that an edge of a box is to be moved up (north)","The cursor indicates that an edge of a box is to be moved up and right (north/east)","Indicates a bidirectional resize cursor","Indicates a bidirectional resize cursor","The cursor indicates that an edge of a box is to be moved up and left (north/west)","Indicates a bidirectional resize cursor","The cursor indicates that the dragged item cannot be dropped here","No cursor is rendered for the element","The cursor indicates that the requested action will not be executed","The cursor is a pointer and indicates a link","The cursor indicates that the program is busy (in progress)","The cursor indicates that the row can be resized vertically","The cursor indicates that an edge of a box is to be moved down (south)","The cursor indicates that an edge of a box is to be moved down and right (south/east)","The cursor indicates that an edge of a box is to be moved down and left (south/west)","The cursor indicates text that may be selected","A comma separated list of URLs to custom cursors. Note: Always specify a generic cursor at the end of the list, in case none of the URL-defined cursors can be used","The cursor indicates vertical-text that may be selected","The cursor indicates that an edge of a box is to be moved left (west)","The cursor indicates that the program is busy","The cursor indicates that something can be zoomed in","The cursor indicates that something can be zoomed out"];
    var cursor =["alias","all-scroll","auto","cell","context-menu","col-resize","copy","crosshair","default","e-resize","ew-resize","help","move","n-resize","ne-resize","nesw-resize","ns-resize","nw-resize","nwse-resize","no-drop","none","not-allowed","pointer","progress","row-resize","s-resize","se-resize","sw-resize","text","URL","vertical-text","w-resize","wait","zoom-in","zoom-out"];
    var cibles = ["h1", "h2", "form", "caption", "p", "body", "table"];
    var descriptionCibles = ["h1 : premier titre principal",
                             "h1 : premier titre de second niveau",
                             "form : formulaire",
                             "caption : titre du tableau du formulaire",
                             "p : paragraphe pour l'affichage des informations",
                             "body : page affichée",
                             "tableau : contenu du formulaire"];

    var nParametres = 6; // nombre de listes déroulantes à construire

    var typeBordures = ["none","hidden","dotted","dashed","solid","double",
                       "groove","ridge","inset","outset","initial","inherit"];
    var bordure = typeBordures[4];
    var descriptionBordure = ["Default value. Specifies no border","The same as ‘none’, except in border conflict resolution for table elements","Specifies a dotted border","Specifies a dashed border","Specifies a solid border","Specifies a double border","Specifies a 3D grooved border. The effect depends on the border-color value","Specifies a 3D ridged border. The effect depends on the border-color value","Specifies a 3D inset border. The effect depends on the border-color value","Specifies a 3D outset border. The effect depends on the border-color value","Sets this property to its default value. Read about initial","Inherits this property from its parent element. Read about inherit"];
    var epaisseur = 1;

    var couleurs = ["white", "black", "grey", "blue", "green", "yellow",
                    "orange", "red", "pink", "brown"];
    var WHITE = BLANC = 0,
        BLACK = NOIR  = 1;
    var nCouleur = NOIR;
    var couleurTexte = couleurs [nCouleur];
    var fond = couleurs [BLANC];
    var couleurBordure = couleurs [nCouleur];

    var nTexture = 1;

    var nuances = [ "light", "dark" ];

    var etatCase = function (bool){ return bool ? "cochée" : "décochée"; }
    // function etatCase (bool){ return bool ? "cochée" : "décochée"; }
    var estNone = function (bool){ return !bool ? "none" : "non vide"; }

    function init() {

        let contenu = "";
        // Affichage d'informations dans le contenu HTML de "p""
        p.innerHTML =    "Fontsize initiale de h1 : " +
                            document.getElementById("h1").style.fontSize;
        let nOption = cursor.length,
            nCibles = cibles.length,
            nCouleurs = couleurs.length,
            nTypeBordure = typeBordures.length;

        let i, j, select = document.getElementById("select");
        for ( i = 0 ; i < nOption ; i++ ){
            select.innerHTML += "<option title='"+descriptionCursor[i]+"'>"+
                cursor[i]+"</option>";
            }
        for ( i = 0 ; i < nParametres ; i++ ){
            select = document.getElementById("select" + i);
            for ( j = 0 ; j < nCibles ; j++ ){
            select.innerHTML += "<option title='"+descriptionCibles[j]+"'>"+
                cibles[j]+"</option>";
                }
            }
        ///// construction menu textures ///////////////////////////////////////
        let textures = ["VieuPapier.jpeg","murDeBrique.jpeg",
                        "textureCraquele.jpeg","textureVieilEnduit.jpeg",
                        "textureReveNature.jpeg", "pool.jpeg", 
                        "vieuBois.jpeg"];
        let = docTextures = ["vieux papier", "mur de briques", "craquelé",
                     "vieil enduit", "rêve de nature", "piscine", 
                     "vieux bois"];
        contenu = "<table>";
        for ( i = 0 ; i < textures.length ; i++ ){
            contenu += "<tr><td><img id='img" + i +
            "'class='menuTextures' src='" + textures[i] +
            "' alt='texture : " + docTextures[i] +
            "' onclick='affImg(this);'></td></tr>";
            }
        contenu += "</table>";
        document.getElementById("menuTextures").innerHTML = contenu;
        document.getElementById("lblTexture").innerHTML = "texture " +
                                    docTextures [nTexture];

        ///////////////                           ///////////////////
        select = document.getElementById("selectCouleur0");
        for ( i = 0 ; i < nCouleurs ; i++ ){
            select.innerHTML += "<option title='couleur sélectionnée "+
                couleurs[i]+"'>"+ couleurs[i]+"</option>";
            }
        //////  choix du type de bordure
        select = document.getElementById("selectBordure");
        for ( i = 0 ; i < nTypeBordure ; i++ ){
            select.innerHTML += "<option title='type de la bordure : "+
                typeBordures[i]+"' onclick='bordure = typeBordures[this.id.slice(4,5)];' id='bord"+i+"'>"+
                typeBordures[i]+"</option>";
            }
        // fin de la fonction d'initialisation
        }

    function select (element) {
        let n         = element.selectedIndex   ,
            parametre = element.name            ;

        if (parametre == 'cursor') {
            document.body.style.cursor = cursor[n];
            document.getElementById("sp_" + element.id).innerHTML = cursor[n];
            document.getElementById("sp_" + element.id).setAttribute("title",
                        descriptionCursor[n]);
        }
    }
    function test () { document.getElementById("h1").innerHTML += " test "; }
    function affImg(image) {
        document.getElementById("choixTexture").src = image.src;
        nTexture = image.id.slice(3,4);
        document.getElementById("lblTexture").innerHTML = "texture " +
                                    docTextures [nTexture];
        document.getElementById("H1backM").value = "url('"+image.src+"')";
    }
    //////////// modifie les couleurs de ... ///////////////////////////////////
    function changeCouleur (target, elementDeFormulaire) {
    let val         = elementDeFormulaire.value     ,
        parametre   = elementDeFormulaire.name,
        id          = elementDeFormulaire.id        ,
        cocher      = elementDeFormulaire.checked   ,
        cible       = document.getElementById(target);

    let tailleId = id.length;

    p.innerHTML = "<br/>La cible est " + target               + "<br/>" +
                "Le paramètre modifié est " + parametre        + "<br/>" +
                "La valeur actuelle est : " + val              + "<br/>" +
                "Si c'est un case, elle est  " + etatCase(cocher) + "<br/>";

    if (parametre == "background" ){
            cible.style.background = val;
            document.getElementById("sp_" + id.slice(0,tailleId-1)).innerHTML =
                                                                    val;
        }
    if (parametre == "couleur" ){
            cible.style.color = val;
            document.getElementById("sp_" + id).innerHTML = val;
        }
    }

    function changeStyle(target, elementDeFormulaire) {
        // récupération des valeurs d'attributs de elementDeFormulaire
        let val         = elementDeFormulaire.value     ,
            parametre   = elementDeFormulaire.name      ,
            id          = elementDeFormulaire.id        ,
            cocher      = elementDeFormulaire.checked   ,
            cible       = document.getElementById(target);

        let tailleId = id.length;

        /////////// affichage dans le paragraphe p des informations de style ///
        p.innerHTML = "<br/>La cible est "     + target           + "<br/>" +
                   "Le paramètre modifié est " + parametre        + "<br/>" +
                   "La valeur actuelle est : " + val              + "<br/>" +
                "Si c'est un case, elle est  " + etatCase(cocher) + "<br/>" +
                "L'identifiant de l'élément sélectionné est "     + id;
        ////////// réglage de la taille  ///////////////////////////////////////
        if (parametre == "fontSize") {
            cible.style.fontSize = val + "%";
            document.getElementById("sp_" + id).innerHTML = val;
        }
        ////////// réglage de la bordure ///////////////////////////////////////
        if ((parametre == "border") && cocher) {
            if (id == "selectBordure") { bordure = val; }
            p.innerHTML += "<br/>" + target + " encadré ;";
            cible.style.border = document.getElementById("sp_" + id).innerHTML =
                 bordure + " "+ epaisseur +"px "+ couleurBordure;
            }
         else {
            if (parametre == "border") {
                numBordure = 0;
                p.innerHTML += "<br/>" + target + " non encadré ;";
                cible.style.border =
                document.getElementById("sp_" + id).innerHTML =
                    typeBordures[numBordure] + " "+ epaisseur +"px "+ couleur;
                }
         }
         ////////// texte souligné ou pas///////////////////////////////////////
         if (parametre == "underline" && cocher) {
            cible.style.textDecoration = parametre;
            document.getElementById("sp_" + id).innerHTML = parametre;
            p.innerHTML += target + " souligné ;";
            }
         else {
            if (parametre == "underline") {
                cible.style.textDecoration = "none";
                document.getElementById("sp_" + id).innerHTML = "none";
                p.innerHTML += target + " non souligné ;";
                }
         }

        if (parametre == "visible" && cocher){
            cible.style.display = "block";
            document.getElementById("sp_" + id).innerHTML = "block";
            p.innerHTML += target + " visible";
        }
        else {
            if (parametre == "visible") {
                cible.style.display = "none";
                document.getElementById("sp_" + id).innerHTML = "none";
                p.innerHTML += target + " non visible";
                }
        }
    }
    //////////////// initialisation des paramètres /////////////////////////////

    function zero () { //test();
        let nCibles = cibles.length;

        p.innerHTMLM = "état initial : éléments sans style particulier.";
        let i, j, select;
        for ( i = 0 ; i < nCibles ; i++ ){
            select = document.getElementById(cibles[i]);

            select.style.color          = "black"       ;
            select.style.background     = "white"       ;
            select.style.border         = "none"        ; // pas de bordure
            select.style.textDecoration = "none"        ; // non souligné
            select.style.fontSize       = "100%"        ;
            select.display               = "block"      ; // affiché, visible

        }
    ////////// fin de reset ////////////////////////////////////////////////////
    }
    /*_________
      Sources :
      _________

https://www.w3schools.com/cssref/tryit.asp?filename=trycss_text-decoration2

*/
</script>
</html>
